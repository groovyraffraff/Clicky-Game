{"version":3,"sources":["components/Wrapper/index.js","components/Header/navBar.jsx","components/GameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Nav","href","userMsg","score","highScore","GameCard","onClick","clicked","isClicked","id","shake","alt","name","src","image","App","state","cardInfo","handleIncrement","setState","gameWin","newCardReset","map","card","gameReset","sort","a","b","Math","random","console","log","increment","newCardInfo","newScore","length","this","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bb1f13c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper container\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","//Nav Bar component includes header style, game title, user message, score and top score\r\n\r\nimport React from \"react\";\r\nimport \"./navBar.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n\r\n      <div className=\"row sticky-top\">\r\n\r\n        <div className=\"col-sm navbar myNavBar\">\r\n\r\n          <li className=\"nav-item navbar-brand myTitle\">\r\n\r\n            <a href=\"/\">Clicky Game!</a>\r\n          </li>\r\n        </div>\r\n        <div className=\"col-sm navbar myNavBar\">\r\n          <li className=\"nav-item userMsg\">{props.userMsg}</li>\r\n        </div>\r\n        <div className=\"col-sm navbar myNavBar\">\r\n          <li className=\"nav-item score\">\r\n            Score: {props.score} | High Score: {props.highScore}\r\n          </li>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","//Game Card component...\r\n//shows card image and\r\n//handles on click event...\r\n//Set is clicked to true and\r\n//if shake = true, apply the shake effect via css class\r\n\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameCard(props) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"card\">\r\n        <div\r\n          onClick={() => props.clicked(props.isClicked, props.id)}\r\n          className={\"img-container\" + (props.shake ? \" shake\" : \"\")}\r\n        >\r\n          <img className=\"img-thumbnail\" alt={props.name} src={props.image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameCard;\r\n","//Main game logic\r\n\r\nimport React, { Component } from \"react\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Nav from \"./components/Header/navBar\";\r\nimport GameCard from \"./components/GameCard\";\r\nimport cardInfo from \"./cardInfo.json\";\r\n\r\nclass App extends Component {\r\n  // state with the cardInfo json array, score, top score, user message and 'shake' state\r\n  state = {\r\n    cardInfo,\r\n    score: 0,\r\n    highScore: 0,\r\n    userMsg: \"Click away! Don't click anything twice!\",\r\n    shake: false\r\n  };\r\n\r\n  handleIncrement = () => {\r\n    // Use the setState method to update a component's state\r\n    this.setState({ clicked: true });\r\n  };\r\n\r\n  //if you guess all cards correctly, give user a Win message and reset the game\r\n  gameWin = () => {\r\n    let newCardReset = this.state.cardInfo.map(card => {\r\n      card.clicked = false;\r\n      return card;\r\n    });\r\n    this.setState({\r\n      cardInfo: [...newCardReset],\r\n      score: 0,\r\n      highScore: 0,\r\n      userMsg: \"You won! Click again to restart\",\r\n      shake: false\r\n    });\r\n  };\r\n\r\n  //guess wrong and game ends\r\n  //reset clicked values to false\r\n  //reset shake value to false\r\n  //reset score to zero\r\n  //update top score\r\n  //shake\r\n  //shuffle\r\n  gameReset = () => {\r\n    // reset all card \"clicked\" properties to false\r\n    let newCardReset = this.state.cardInfo.map(card => {\r\n      card.clicked = false;\r\n      return card;\r\n    });\r\n\r\n    // resort entire array of cards\r\n    newCardReset.sort(function(a, b) {\r\n      return 0.5 - Math.random();\r\n    });\r\n\r\n    this.setState(\r\n      {\r\n        cardInfo: [...newCardReset],\r\n        score: 0,\r\n        highScore: this.state.highScore,\r\n        userMsg: \"Incorrect Guess. Game Over.\",\r\n        shake: true\r\n      },\r\n      () => {\r\n        // see latest state changes in console\r\n        console.log(\"reset\", this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  //correct guesses are unpicked cards\r\n  //state changes to true\r\n  //shuffle\r\n  //add to score\r\n  //correct message\r\n  //shake false\r\n\r\n  increment = (isClicked, id) => {\r\n    console.log(\"entering increment function \", isClicked, id);\r\n    if (isClicked === false) {\r\n      // update element in card array with \"clicked property as true\"\r\n      let newCardInfo = this.state.cardInfo;\r\n      newCardInfo[id].clicked = true;\r\n\r\n      // resort entire array of cards\r\n      newCardInfo.sort(function(a, b) {\r\n        return 0.5 - Math.random();\r\n      });\r\n\r\n      //add one point to the score\r\n      let newScore = this.state.score + 1;\r\n\r\n      // update react state\r\n      // 1) sorted newCardInfo with item clicked as true\r\n      // 2) show user message, \"That's correct!\"\r\n      // 3) score with addition of 1 point\r\n      // 4) shake set to false\r\n\r\n      this.setState(\r\n        {\r\n          cardInfo: [...newCardInfo],\r\n          userMsg: \"Correct!\",\r\n          score: newScore,\r\n          shake: false\r\n        },\r\n        () => {\r\n          // see latest state changes in console\r\n          console.log(\"guessed correctly\", this.state);\r\n        }\r\n      );\r\n\r\n      //if all cards guessed correctly, run gameWin function\r\n      if (newScore === cardInfo.length) {\r\n        this.gameWin();\r\n      }\r\n\r\n      //if user guesses correctly add one point to the score\r\n      else if (newScore >= this.state.highScore) {\r\n        this.setState({ highScore: newScore });\r\n      }\r\n    }\r\n    //if user guesses incorrectly, run gameReset function\r\n    else {\r\n      this.gameReset();\r\n    }\r\n  };\r\n\r\n  //still learning react - eric showed me how to do this and helped me get it working but the wrappers are still sketchy to me\r\n  // i basically understand but its a little funky.\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Nav\r\n          userMsg={this.state.userMsg}\r\n          score={this.state.score}\r\n          highScore={this.state.highScore}\r\n        />\r\n        {this.state.cardInfo.map((cardInfo, index) => (\r\n          <GameCard\r\n            clicked={this.increment}\r\n            id={index}\r\n            key={index}\r\n            image={cardInfo.image}\r\n            isClicked={cardInfo.clicked}\r\n            shake={this.state.shake}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\n//import Card from \"./components/card\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n//ReactDOM.render(<Score />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}